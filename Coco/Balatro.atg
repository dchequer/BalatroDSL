using BalatroDSL.Models;

COMPILER Balatro

public Hand currentHand;
int cardCounter = 0;

void AddCardToHand(string cardText) {
    string rankStr = cardText.Substring(0, cardText.Length - 2);
    char suitChar = cardText[cardText.Length - 2];
    char modChar = cardText[cardText.Length - 1];

    Rank rank = rankStr switch
    {
        "2" => Rank.Two,
        "3" => Rank.Three,
        "4" => Rank.Four,
        "5" => Rank.Five,
        "6" => Rank.Six,
        "7" => Rank.Seven,
        "8" => Rank.Eight,
        "9" => Rank.Nine,
        "10" => Rank.Ten,
        "J" => Rank.Jack,
        "Q" => Rank.Queen,
        "K" => Rank.King,
        "A" => Rank.Ace,
        _ => throw new Exception("Invalid rank")
    };

    Suit suit = suitChar switch {
        'H' => Suit.Hearts,
        'D' => Suit.Diamonds,
        'S' => Suit.Spades,
        'C' => Suit.Clubs,
        _ => throw new Exception("Invalid suit")
    };

    CardModifier modifier = modChar switch {
        'N' => CardModifier.None,
        'B' => CardModifier.Bonus,
        'M' => CardModifier.Mult,
        'G' => CardModifier.Glass,
        _ => throw new Exception("Invalid card modifier")
    };

    var card = new Card {
        Rank = rank,
        Suit = suit,
        Modifier = modifier,
        OriginalIndex = cardCounter++,
    };

    currentHand.Cards.Add(card);
}

void AddJokerToHand(string text)
{
    if (string.IsNullOrWhiteSpace(text) || text.Length < 3)
        throw new Exception("Invalid joker format.");

    var joker = new Joker();

    // Parse modifier
    joker.Modifier = text[0] switch
    {
        'N' => JokerModifier.None,
        'F' => JokerModifier.Foil,
        'H' => JokerModifier.Holographic,
        'P' => JokerModifier.Polychrome,
        _ => throw new Exception("Invalid joker modifier.")
    };

    // Parse type
    joker.Type = text[1] switch
    {
        'A' => JokerType.AdditiveMult,
        'M' => JokerType.Multiplicative,
        'C' => JokerType.ChipsAndAdditive,
        'R' => JokerType.Retrigger,
        _ => throw new Exception("Invalid joker type.")
    };

    // Parse rest
    var rest = text.Substring(2);

    if (joker.Type == JokerType.AdditiveMult || joker.Type == JokerType.Multiplicative)
    {
        joker.EffectValue1 = int.Parse(rest);
    }
    else if (joker.Type == JokerType.ChipsAndAdditive)
    {
        var parts = rest.Split('_');
        if (parts.Length != 2)
            throw new Exception("Invalid Chips&Additive Joker format. Expected two numeric values separated by '_'.");
        joker.EffectValue1 = int.Parse(parts[0]); // chips
        joker.EffectValue2 = int.Parse(parts[1]); // multiplier
    }
    else if (joker.Type == JokerType.Retrigger)
    {
        var match = System.Text.RegularExpressions.Regex.Match(rest, @"^(\d+)?([A-Za-z0-9]*)$");
        if (match.Success)
        {
            if (!string.IsNullOrEmpty(match.Groups[1].Value))
                joker.EffectValue1 = int.Parse(match.Groups[1].Value);

            if (!string.IsNullOrEmpty(match.Groups[2].Value))
                joker.TriggerTarget = match.Groups[2].Value;
        }
    }

    currentHand.Jokers.Add(joker);
}


CHARACTERS
  letter	 = 'a'..'z' + 'A'..'Z' .
  digit      = '0'..'9' .

  tab        = '\t' .
  cr         = '\r' .
  lf         = '\n' .

TOKENS
  card = ("2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "J" | "Q" | "K" | "A") // rank (2-10 J Q K A)
         ("H" | "D" | "S" | "C")                                                        // suit (Hearts Diamonds Spades Clubs)
         ("N" | "B" | "M" | "G") .                                                      // modifier (None Bonus Mult Glass)

  joker = ("N" | "F" | "H" | "P")                                                       // modifier (None Foil Holographic Polychrome)
          ("A" | "M" | "C" | "R")                                                       // joker type (Additive Multiplicative Chips&Additive Retrigger) 
          ( digit {digit} )                                                             // effect value (digit)
          [ "_" digit {digit} ]                                                         // optional second effect value (digits)]
          [ letter {letter | digit} ] .                                                 // optional retrigger target


IGNORE tab + cr + lf + ' '

PRODUCTIONS

  Balatro =
    (. currentHand = new Hand(); .)
    ParseHand .

  ParseHand =
    Entry { "," Entry } .

  Entry =
    card (. AddCardToHand(t.val); .)
  | joker (. AddJokerToHand(t.val); .) .

END Balatro.