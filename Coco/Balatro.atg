using BalatroDSL.Models;

COMPILER Balatro

public Hand currentHand;
int cardCounter = 0;

void AddCardToHand(string cardText) 
{
    string rankStr = cardText.Substring(0, cardText.Length - 2);
    char suitChar = cardText[cardText.Length - 2];
    char modChar = cardText[cardText.Length - 1];

    Rank rank = rankStr switch
    {
        "2" => Rank.Two,
        "3" => Rank.Three,
        "4" => Rank.Four,
        "5" => Rank.Five,
        "6" => Rank.Six,
        "7" => Rank.Seven,
        "8" => Rank.Eight,
        "9" => Rank.Nine,
        "10" => Rank.Ten,
        "J" => Rank.Jack,
        "Q" => Rank.Queen,
        "K" => Rank.King,
        "A" => Rank.Ace,
        _ => throw new Exception("Invalid rank")
    };

    Suit suit = suitChar switch {
        'H' => Suit.Hearts,
        'D' => Suit.Diamonds,
        'S' => Suit.Spades,
        'C' => Suit.Clubs,
        _ => throw new Exception("Invalid suit")
    };

    CardModifier modifier = modChar switch {
        'N' => CardModifier.None,
        'B' => CardModifier.Bonus,
        'M' => CardModifier.Mult,
        'G' => CardModifier.Glass,
        _ => throw new Exception("Invalid card modifier")
    };

    var card = new Card {
        Rank = rank,
        Suit = suit,
        Modifier = modifier,
        OriginalIndex = cardCounter++,
    };

    currentHand.Cards.Add(card);
}

void AddJokerToHand(string text)
{
    if (string.IsNullOrWhiteSpace(text) || text.Length < 2)
        throw new Exception("Invalid Joker input.");

    text = text.ToUpperInvariant();

    var joker = new Joker();

    // Step 1: Modifier
    joker.Modifier = text[0] switch
    {
        'N' => JokerModifier.None,
        'F' => JokerModifier.Foil,
        'H' => JokerModifier.Holographic,
        'P' => JokerModifier.Polychrome,
        _ => throw new Exception("Invalid Joker Modifier.")
    };

    // Step 2: Type
    char typeLetter = text[1];
    var rest = text.Substring(2); // all after modifier and type

    switch (typeLetter)
    {
        case 'A':
            joker.Type = JokerType.AdditiveMult;
            joker.EffectValue1 = ParseSingleValue(rest);
            break;

        case 'M':
            joker.Type = JokerType.Multiplicative;
            joker.EffectValue1 = ParseSingleValue(rest);
            break;

        case 'C':
            joker.Type = JokerType.ChipsAndAdditive;
            ParseTwoValues(rest, out int chips, out int mult);
            joker.EffectValue1 = chips;
            joker.EffectValue2 = mult;
            break;

        case 'T':
            joker.Type = JokerType.Trigger;
            ParseTriggerJoker(rest, joker);
            break;

        default:
            throw new Exception("Invalid Joker Type Letter.");
    }

    currentHand.Jokers.Add(joker);
}

int ParseSingleValue(string text)
{
    if (int.TryParse(text, out int value))
        return value;

    throw new Exception("Expected numeric value for Joker.");
}

void ParseTwoValues(string text, out int first, out int second)
{
    var parts = text.Split('_');
    if (parts.Length != 2)
        throw new Exception("Expected two values separated by '_'.");

    if (!int.TryParse(parts[0], out first) || !int.TryParse(parts[1], out second))
        throw new Exception("Invalid numeric values for Chips&Mult Joker.");
}

void ParseTriggerJoker(string text, Joker joker)
{
    if (string.IsNullOrEmpty(text))
        throw new Exception("Trigger Joker must specify target ranks.");

    if (text.Length >= 2 && (text[0] == 'A' || text[0] == 'M' || text[0] == 'C'))
    {
        // Explicit effect specified
        char effectType = text[0];
        var parts = text.Substring(1).Split('_');

        if (parts.Length != 2)
            throw new Exception("Expected '_' separator between value and target.");

        if (!int.TryParse(parts[0], out int value))
            throw new Exception("Invalid numeric effect value.");

        joker.EffectValue1 = value;
        joker.TriggerMode = JokerTriggerMode.AddEffectOnTrigger;
        joker.TriggerEffect = effectType switch
        {
            'A' => JokerTriggerEffect.AddMult,
            'M' => JokerTriggerEffect.MultiplyMult,
            'C' => JokerTriggerEffect.AddChips,
            _ => throw new Exception("Unknown trigger effect type.")
        };

        joker.TriggerTarget = parts[1];
    }
    else
    {
        // No explicit effect => simple replay trigger
        joker.TriggerMode = JokerTriggerMode.ReplayCard;
        joker.TriggerEffect = JokerTriggerEffect.None;
        joker.TriggerTarget = text;
    }
}


CHARACTERS
  letter	 = 'a'..'z' + 'A'..'Z' .
  digit      = '0'..'9' .

  tab        = '\t' .
  cr         = '\r' .
  lf         = '\n' .

TOKENS
  card = ("2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "J" | "Q" | "K" | "A") // rank (2-10 J Q K A)
         ("H" | "D" | "S" | "C")                                                        // suit (Hearts Diamonds Spades Clubs)
         ("N" | "B" | "M" | "G") .                                                      // modifier (None Bonus Mult Glass)

  joker = ("N" | "F" | "H" | "P")                                                      // modifier (None Foil Holographic Polychrome)
          { letter | digit | "_"}.
          //("A" | "M" | "C" | "R")                                                       // joker type (Additive Multiplicative Chips&Additive Retrigger) 
          //( digit {digit} )                                                             // effect value (digit)
          //[ "_" digit {digit} ]                                                         // optional second effect value (digits)]
          //[ letter {letter | digit} ] .                                                 // optional retrigger target


IGNORE tab + cr + lf + ' '

PRODUCTIONS

  Balatro =
    (. currentHand = new Hand(); .)
    ParseHand .

  ParseHand =
    Entry { "," Entry } .

  Entry =
    card (. AddCardToHand(t.val); .)
  | joker (. AddJokerToHand(t.val); .) .

END Balatro.